syntax = "proto3";
package org.demo.queryRuntime;

// tag::QueryRequest[]
message QueryRequest {
    repeated string keysFilter = 1;
    int32 frequencyOfSend = 2; // required
}

message QueryResponse {
    enum InitResponseEnum {
        CONTINUE = 0;
        RECONNECT = 1;
        MOVE_TO = 2;
    }
    InitResponseEnum action = 1; // required
    string streamUid = 2; // required
    string url = 3;
}
// end::QueryRequest[]

// tag::GetDataRequest[]
message GetDataRequest {
    string streamUid = 1;  // required
    string fromTime = 2;  // required
}

message KeyValue {
    string key = 1;  // required
    int32 value = 2;  // required
}

message GetDataResponse {
    enum InitResponseEnum {
        CONTINUE = 0;
        RECONNECT = 1;
    }
    InitResponseEnum action = 1;  // required
    string streamUid = 2;  // required
    int32 timestamp = 3;  // required
    repeated KeyValue data = 4;
}
// end::GetDataRequest[]


// tag::CompleteRequest[]
message CompleteRequest {
    string monitoringData = 1;  // required
    string streamUid = 2;  // required
}

message CompleteResponse {
    bool result = 1;     // required
    string description = 2;
}
// end::CompleteRequest[]

// tag::EmcaQueryRuntimeDataService[]
service EmcaQueryRuntimeDataService {
    rpc Init(QueryRequest) returns (QueryResponse);
    rpc getData(GetDataRequest) returns (stream GetDataResponse);
    rpc Complete(CompleteRequest) returns (CompleteResponse);
}
// end::EmcaQueryRuntimeDataService[]