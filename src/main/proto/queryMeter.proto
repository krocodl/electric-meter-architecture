syntax = "proto3";
package org.demo.queryMeter;

// tag::QueryRequest[]
message QueryRequest {
    repeated bytes meterUuid = 1;
    int32 fromTime = 2; //required
    int32 toTime = 3; //required
}

message QueryResponse {
    enum InitResponseEnum {
        CONTINUE = 0;
        RECONNECT = 1;
        MOVE_TO = 2;
    }
    InitResponseEnum action = 1; //required
    string streamUid = 2; //required
    string url = 3;
}
// end::QueryRequest[]

// tag::GetDataRequest[]
message GetDataRequest {
    string streamUid = 1; //required
    int32 offset = 2; //required
    int32 backpressureCount = 3;
}

message MeterMeasurement {
    int32 timestamp = 1; //required
    int32 measurement = 2; //required
}

message MeterData {
    bytes meterUuid = 1; //required
    repeated MeterMeasurement data = 2;
}

message GetDataResponse {
    enum InitResponseEnum {
        CONTINUE = 0;
        RECONNECT = 1;
    }
    InitResponseEnum action = 1; //required
    string streamUid = 2; //required
    int32 offset = 3; //required
    repeated MeterData data = 4;
}
// end::GetDataRequest[]

// tag::AckDataRequest[]
message AckDataRequest {
    string cursorUid = 1; //required
    int32 offset = 2; //required
    int32 backpressureDelta = 3;
}

message AckDataResponse{

}

// end::AckDataRequest[]

// tag::CompleteRequest[]
message CompleteRequest {
    string monitoringData = 1; //required
    string streamUid = 2; //required
}

message CompleteResponse {
    bool result = 1; //required
    string description = 2;
}
// end::CompleteRequest[]

// tag::EmcaQueryMetersDataService[]
service EmcaQueryMetersDataService {
    rpc Init(QueryRequest) returns (QueryResponse);
    rpc getData(GetDataRequest) returns (stream GetDataResponse);
    rpc ackData(AckDataRequest) returns (AckDataResponse);
    rpc Complete(CompleteRequest) returns (CompleteResponse);
}
// end::EmcaQueryMetersDataService[]