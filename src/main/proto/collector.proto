syntax = "proto3";
package org.demo.collector;

// tag::InitRequest[]
message InitRequest {
    string gatewayId = 1;  // required
    string gatewayType = 2;  // required
    string gatewayVersion = 3; // required
    string configurationVersion = 4; // required
    int32 batchesCount = 5; // required
    int32 batchesSize = 6; // required
}
message InitResponse {
    enum InitResponseEnum {
        CONTINUE = 0;
        REPEAT_AFTER = 1;
        MOVE_TO = 2;
    }
    InitResponseEnum action = 1; // required
    int32 pause = 2;
    string url = 3;
    int32 batchesCount = 4;
    string newConfiguratuion = 5;
}
// end::InitRequest[]

// tag::BatchRequest[]
message MeterMeasurement {
    int32 timestamp = 1; // required
    int32 measurement = 2;  // required
}

message MeterData {
    bytes meterUuid = 1; // required
    repeated MeterMeasurement data = 2;
}

message BatchRequest {
    bytes batchUuid = 1;  // required
    repeated MeterData data = 2;
}

message BatchResponse {
    bytes batchUuid = 1; // required
    bool result = 2;  // required
    string description = 3;
}
// end::BatchRequest[]

// tag::CompleteRequest[]
message CompleteRequest {
    string monitoringData = 1; // required
}

message CompleteResponse {
    bool result = 1; // required
    string description = 2; // required
}
// end::CompleteRequest[]

// tag::EmcaCollectorService[]
service EmcaCollectorService {
    rpc Init(InitRequest) returns (InitResponse);
    rpc SendBatch(stream BatchRequest) returns (stream BatchResponse);
    rpc Complete(CompleteRequest) returns (CompleteResponse);
}
// end::EmcaCollectorService[]
